# This is a basic workflow to help you get started with Actions

name: Build Loudrr

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    paths:
      - "app/**"
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      PASS: ${{ secrets.SSH_PASS }}
      USER: ${{ secrets.SSH_USER }}
      SERVER: ${{ secrets.STAGING_SERVER }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      NEXT_PUBLIC_BRAND_NAME: ${{ secrets.NEXT_PUBLIC_BRAND_NAME }}
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.STAGING_PORT }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Node
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 12.x
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Yarn
        run: npm install -g yarn

      - name: Install sshpass
        run: |
          sudo apt-get -y install sshpass zip unzip rsync
       
      # Runs a set of commands using the runners shell
      - name: build the artifact.
        run: |
          cd app
          echo $env
          yarn && yarn build
          
          
      - name: Deploy artifact
        run: |
          cd app
          mkdir deploy
          cp -r node_modules deploy
          cp -r .next deploy
          cp package.json deploy
          cp -r public deploy
          echo "sshpass -p ${PASS} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$SERVER -p $PORT \"cd experiments/loudrr-staging && rm -rf ./**\""
          sshpass -p ${PASS} rsync --progress -avz -e \"ssh -p $PORT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \" ./deploy/** $USER@$SERVER:experiments/loudrr-staging/
          sshpass -p ${PASS} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$SERVER -p $PORT "cd experiments/loudrr-staging/app; pm2  restart loudrr-staging;"
          
 
